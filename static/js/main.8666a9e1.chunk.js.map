{"version":3,"sources":["Stopwatch.Component.tsx","UseInterval.hook.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Stopwatch","props","initialLaps","useState","timer","setTimer","running","setRunning","laps","setLaps","lastLap","setLastLap","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","style","border","padding","margin","textAlign","Box","m","fontSize","toFixed","ButtonGroup","color","aria-label","Button","onClick","className","map","lap","index","App","stopwatches","setStopwatches","Container","AppBar","position","Toolbar","variant","length","Grid","top","container","direction","justify","alignItems","S","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sTAKe,SAASA,EAAUC,GAC9B,IAAMC,EAAwB,GADY,EAEhBC,mBAAS,GAFO,mBAEnCC,EAFmC,KAE5BC,EAF4B,OAGZF,oBAAS,GAHG,mBAGnCG,EAHmC,KAG1BC,EAH0B,OAIlBJ,mBAASD,GAJS,mBAInCM,EAJmC,KAI7BC,EAJ6B,OAKZN,mBAAS,GALG,mBAKnCO,EALmC,KAK1BC,EAL0B,KAyB1C,OC5BW,SAAqBC,EAAeC,GAC/C,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACNF,EAAcG,QAAUL,IACzB,CAACA,IAGJI,qBAAU,WAMN,GAAc,OAAVH,EAAgB,CAChB,IAAIK,EAAKC,aANb,WAEIL,EAAcG,YAIaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAEhC,CAACL,IDGJQ,EAAY,WACJf,GACAD,EAASD,EAAQ,MAEtB,KAGC,qBAAKkB,MAAO,CACRC,OAAQ,sCACRC,QAAS,MACTC,OAAQ,MACRC,UAAW,UAJf,SAOI,eAACC,EAAA,EAAD,CAAKC,EAAG,EAAR,UACI,qBAAIN,MAAO,CAACI,UAAW,SAAUG,SAAU,OAA3C,cAAqDzB,EAAM0B,QAAQ,MACnE,eAACC,EAAA,EAAD,CAAaC,MAAM,UAAUC,aAAW,gCAAxC,UACI,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM5B,GAAW,IAAlC,mBACA,cAAC2B,EAAA,EAAD,CAAQC,QAAS,kBAAM5B,GAAW,IAAlC,mBACA,cAAC2B,EAAA,EAAD,CAAQC,QAAS,kBA9B7B5B,GAAW,GACXF,EAAS,GACTI,EAAQP,QACRS,EAAW,IA2BC,qBACA,cAACuB,EAAA,EAAD,CAAQC,QAAS,kBAxB7B1B,EAAQ,GAAD,mBAAKD,GAAL,CAAWJ,EAAQM,UAC1BC,EAAWP,IAuBC,sBAEJ,cAACuB,EAAA,EAAD,CAAKS,UAAW,OAAhB,SAEQ5B,EAAK6B,KAAI,SAACC,EAAaC,GAAd,OACL,sBAAMH,UAAU,MAAhB,SAA4CE,EAAIR,QAAQ,IAAxD,cAAkCS,cEvB/CC,MArBf,WAAgB,IAAD,EAC2BrC,mBAAS,CAAC,cAACH,EAAD,oBADrC,mBACJyC,EADI,KACSC,EADT,KAGX,OACI,eAACC,EAAA,EAAD,CAAWP,UAAU,MAArB,UACI,cAACQ,EAAA,EAAD,CAAQC,SAAS,QAAjB,SACI,cAACC,EAAA,EAAD,UACI,cAACZ,EAAA,EAAD,CAAQa,QAAQ,YAAYf,MAAM,YAC1BG,QAAS,kBAAMO,EAAe,GAAD,mBAAKD,GAAL,CAAkB,cAACzC,EAAD,uBACzByC,EAAYO,aAF1C,mBAMR,cAACC,EAAA,EAAD,CAAM3B,MAAO,CAACuB,SAAU,WAAYK,IAAK,SAAUC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAC/EC,WAAW,aADjB,SAEKb,EAAYJ,KAAI,SAACkB,GAAD,OAAYA,WCN9BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8666a9e1.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Box, Button, ButtonGroup} from \"@material-ui/core\";\nimport './App.css';\nimport useInterval from \"./UseInterval.hook\";\n\nexport default function Stopwatch(props: any) {\n    const initialLaps: number[] = [];\n    const [timer, setTimer] = useState(0.0);\n    const [running, setRunning] = useState(false);\n    const [laps, setLaps] = useState(initialLaps);\n    const [lastLap, setLastLap] = useState(0);\n\n    function resetTimer() {\n        setRunning(false);\n        setTimer(0.0);\n        setLaps(initialLaps);\n        setLastLap(0);\n    }\n\n    function lap() {\n        setLaps([...laps, timer - lastLap]);\n        setLastLap(timer);\n    }\n\n    useInterval(() => {\n        if (running) {\n            setTimer(timer + 0.1);\n        }\n    }, 100);\n\n    return (\n        <div style={{\n            border: \"thick solid rgba(192, 32, 32, 0.32)\",\n            padding: \"1em\",\n            margin: \"1em\",\n            textAlign: \"center\"\n        }}>\n\n            <Box m={3}>\n                <h1 style={{textAlign: \"center\", fontSize: \"3em\"}}> {timer.toFixed(1)}</h1>\n                <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n                    <Button onClick={() => setRunning(true)}>Start</Button>\n                    <Button onClick={() => setRunning(false)}>Pause</Button>\n                    <Button onClick={() => resetTimer()}> Reset </Button>\n                    <Button onClick={() => lap()}> Lap </Button>\n                </ButtonGroup>\n                <Box className={\"laps\"}>\n                    {\n                        laps.map((lap: number, index: number) =>\n                            <span className=\"lap\" key={`lap-${index}`}>{lap.toFixed(1)}</span>\n                        )\n                    }\n                </Box>\n            </Box>\n\n\n        </div>\n    );\n}\n","import {useEffect, useRef} from 'react';\n\nexport default function useInterval(callback: any, delay: number) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            // @ts-ignore\n            savedCallback.current();\n        }\n\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {AppBar, Button, Container, Grid, Toolbar} from \"@material-ui/core\";\nimport Stopwatch from \"./Stopwatch.Component\";\n\nfunction App() {\n    const [stopwatches, setStopwatches] = useState([<Stopwatch key={`stopwatch-0`}/>]);\n\n    return (\n        <Container className=\"App\">\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <Button variant=\"contained\" color=\"secondary\"\n                            onClick={() => setStopwatches([...stopwatches, <Stopwatch\n                                key={`stopwatch-${stopwatches.length}`}/>])}>+</Button>\n\n                </Toolbar>\n            </AppBar>\n            <Grid style={{position: \"relative\", top: \"100px\"}} container direction=\"row\" justify=\"flex-start\"\n                  alignItems=\"flex-start\">\n                {stopwatches.map((S: any) => S)}\n            </Grid>\n        </Container>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}